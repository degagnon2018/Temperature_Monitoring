library(gulf.spatial)
map()
map(layer = "strata", survey = "rv", region = "gulf")
read.gulf.spatial("fishing zone vertices", file = "shp", species = 2550,  region = "gulf", lfa = 26A)
read.gulf.spatial("fishing zone vertices", file = "shp", species = 2550,  region = "gulf", lfa = "26A")
library(gulf)
clg()
xlim <- c(-66.5, -60.15)
ylim <- c(45.5, 48.5)
ratio <- distance(xlim[1], ylim[1], xlim[1], ylim[2]) / distance(xlim[1], ylim[1], xlim[2], ylim[1])
width <- 9
windows(height = ratio * width, width = width);
plot(xlim, ylim, type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
coastline(col = grey(0.9), border = grey(0.6))
bathymetry(dem = FALSE, levels =  -c(10, 25, 50, 100, 150, 200, 300, 400))
map.place.names(language = "english")
box()
read.gulf.spatial("fishing zone vertices", file = "shp", species = 2550,  region = "gulf", lfa = "26A")
map.fishing.zones <- function(region = "gulf", species = NULL, fishing.zone = NULL,
labels = FALSE, cex = 0.7, ...){
# MAP.FISHING.ZONES - Plot fishing zone boundaries for various species.
# Load stratum polygon definitions:
data("fishing.zone.polygons")
p <- subset(fishing.zone.polygons, region = region, species = species, fishing.zone = fishing.zone)
# Draw polygons:
plot.polygon(p, ...)
# Plot labels:
if (labels){
if (all(c("label.x", "label.y") %in% names(p[[i]]))){
x <- p[[i]]$label.x
y <- p[[i]]$label.y
}else{
x <- mean(p[[i]]$x)
y <- mean(p[[i]]$y)
}
if ("label.angle" %in% names(p[[i]])) angle <- p[[i]]$label.angle else angle <- 0
text(x, y, p[[i]]$label, srt = angle, cex = cex)
}
}
# Load stratum polygon definitions:
data("fishing.zone.polygons")
> map("worldHires", xlim=Long.lim, ylim=Lat.lim, col="grey", fill=TRUE, resolution=0);map.axes();
library(mapdata)
> map("worldHires", xlim=Long.lim, ylim=Lat.lim, col="grey", fill=TRUE, resolution=0);map.axes();
detach("package:maps", unload = TRUE)
library(maps)
detach("package:mapdata", unload = TRUE)
library(mapdata)
> map("worldHires", xlim=Long.lim, ylim=Lat.lim, col="grey", fill=TRUE, resolution=0);map.axes();
> map("worldHires", xlim=Long.lim, ylim=Lat.lim, col="grey", fill=TRUE, resolution=0)
> samps <- read.xlsx("W:/Lobster/Données de Température/Technical reports/Rapport temperature 2014-2015/position probes 2015.xlsx", 1)
library(xlsx)
> samps <- read.xlsx("W:/Lobster/Données de Température/Technical reports/Rapport temperature 2014-2015/position probes 2015.xlsx", 1)
> samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/position probes 2015.xlsx", 1)
> read.xlsx("C:/Users/Gagnondj/Documents/Covid/position probes 2015.xlsx", 1)
read.xlsx("C:/Users/Gagnondj/Documents/Covid/position probes 2015.xlsx", 1)
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/position probes 2015.xlsx", 1)
map("worldHires", xlim=Long.lim, ylim=Lat.lim, col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-63.11), ylim=c(46.005,46.01, col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-63.11), ylim=c(46.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-62,-64), ylim=c(44.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-62,-64), ylim=c(44.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64,-62), ylim=c(46.005,44.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-63.11), ylim=c(46.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(46.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(46.005,44.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(46.005,45.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(46.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(47.005,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-63.11), ylim=c(46.905,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-62.11), ylim=c(48.905,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-62.11), ylim=c(46.905,48.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-62.11), ylim=c(44.905,46.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-62.11), ylim=c(44.905,47.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-63.12,-62.11), ylim=c(43.905,47.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-61.11), ylim=c(43.905,47.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-64.12,-61.11), ylim=c(43.905,47.01), col="grey", fill=TRUE, resolution=0);map.axes();
samps <- read.xlsx("W:/Lobster/Données de Température/Technical reports/Rapport temperature 2014-2015/position probes 2015.xlsx", 1)
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/position probes 2015.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
map("worldHires", xlim=c(-63.5,-63.2), ylim=c(45.56,46), col="grey", fill=TRUE, resolution=0);map.axes();
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
map("worldHires", xlim=c(-63.5,-63.2), ylim=c(45.56,46), col="grey", fill=TRUE, resolution=0);map.axes();
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
distance(45.9006,-63.41495,45.88166667,-63.44416667)
distance(45.9006,-63.41495,45.88166667,-63.44416667, coordinate.units = "latlon", distance.units = "km")
library(maps)
library(mapdata)
map("worldHires", xlim=c(-64.12,-61.11), ylim=c(43.905,47.01), col="grey", fill=TRUE, resolution=0);map.axes();
map("worldHires", xlim=c(-65.12,-60.11), ylim=c(43.905,48.01), col="grey", fill=TRUE, resolution=0);map.axes();
map.scale(ratio=FALSE) # do you want a scale?
map("worldHires", xlim=c(-65.12,-60.11), ylim=c(43.905,48.01), col="grey", fill=TRUE, resolution=0);map.axes();
map.scale(ratio=FALSE) # do you want a scale?
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
library(xlsx)
samps <- read.xlsx("C:/Users/Gagnondj/Documents/Covid/positions.plot.R.xlsx", 1)
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)
text(samps$lon,samps$lat, labels=samps$ID,cex=.5,adj=0)
#' @export read.minilog
read.minilog <- function(x, ...) UseMethod("read.minilog")
#' @describeIn read.minilog Read a Minilog data file.
#' @rawNamespace S3method(read.minilog,default)
read.minilog.default <- function(x, file, offset = 0, verbose = FALSE, ...){
# Define file(s) to be read:
if (!missing(x) & missing(file)) if (is.character(x)) file = x
if (missing(file)){
if (missing(x)) file <- locate.minilog(...) else file <- locate.minilog(x, ...)
}
if (length(file) == 0) return(NULL)
# Read multiple netmind files and concatenate them:
if (length(file) == 0) return(NULL)
if (length(file) > 1){
x <- vector(mode = "list", length = length(file))
k <- 0
for (i in 1:length(file)){
if (verbose) cat(paste(i, ") Reading: '", file[i], "'\n", sep = ""))
x[i] <- list(expand(read.minilog(file[i])))
k <- k + nrow(x[[i]])
}
# Standardize data frame formats:
vars <- unique(unlist(lapply(x, names)))
for (i in 1:length(x)){
ix <- setdiff(vars, names(x[[i]]))
if (length(ix) > 0){
x[[i]][ix] <- ""
x[[i]] <- x[[i]][vars]
}
}
# Efficiently catenate data frames:
while (length(x) >= 2){
ix <- seq(2, length(x), by = 2)
for (i in ix) x[i] <- list(rbind(x[[i-1]], x[[i]]))
if (i < length(x)) ix <- c(ix, length(x))
x <- x[ix]
}
x <- x[[1]]
gulf.metadata::header(x) <- NULL
return(x)
}
# Read and parse header info:
y <- read.table(file = file, nrow = 30, colClasses = "character", sep = "\n")
y <- y[, 1]
# Fix odd characters:
y <- gsub('\xeb', " ", y)
y <- gsub('\xf8C', " ", y)
y <- gsub('\xb0C', " ", y)
y <- gsub('\xee', "i", y)
y <- gsub('\xfb', "u", y)
y <- gsub('\xce', "I", y)
y <- gsub('\xc9', "E", y)
y <- gsub('\xf4', "a", y)
y <- gsub('\xe0', "a", y)
y <- gsub('\xe9', "e", y)
y <- gsub('\xe8', "e", y)
y <- gsub('\"+', " ", y)
# Define location of field names :
k <- grep("^[*]*[ ]*date", tolower(y))
if (length(k) == 0) k <- (length(y) + 1)
if (length(k) > 1)  k <- k[1]
# Read minilog data:
for (i in c(",", " ", "\t")){
if (i == ","){
x <- read.table(file = file, header = FALSE, skip = k, sep = i, colClasses = "character")
if (ncol(x) > 1) sep <- i
}
if ((ncol(x) == 1) & (i != ",")){
x <- read.table(file = file, header = FALSE, skip = k, sep = i, colClasses = "character")
if (ncol(x) > 1) sep <- i
}
}
# Rename fields:
y[k] <- tolower(gsub("[*] ", "", y[k]))
y[k] <- gsub("celsius", "temp", y[k])
y[k] <- gsub("meters", "depth", y[k])
y[k] <- gsub("temp[(] +[)]", "temp", y[k])
fields <- tolower(unlist(strsplit(y[k], sep)[[1]]))
fields[grep("date", fields)]  <- "date"
fields[grep("time", fields)]  <- "time"
fields[grep("atod", fields)]  <- "depth"
fields[grep("depth", fields)] <- "depth"
fields[grep("temp", fields)]  <- "temperature"
# Name variable fields:
names(x) <- fields
# Get date format:
date.format <- tolower(unlist(strsplit(y[k], sep)[[1]]))[which(fields == "date")]
date.format <- tolower(gsub("[)]", "", unlist(strsplit(date.format, "[(]"))[2]))
if (is.na(date.format)) date.format <- "yyyy-mm-dd"
# Parse header information:
header <- header.minilog(file)
# Format numeric variables:
if ("temperature" %in% names(x)) x$temperature <- as.numeric(x$temperature)
if ("depth" %in% names(x))       x$depth       <- as.numeric(x$depth)
# Fix date formats:
if (date.format == "yy-mm-dd"){
ix <- as.numeric(substr(x$date, 1, 2)) < 20
x$date[!ix] <- paste0("19", x$date[!ix])
x$date[ix]  <- paste0("20", x$date[ix])
}
if (date.format == "dd-mm-yyyy") x$date <- paste0(substr(x$date, 7, 10), "-", substr(x$date, 4, 5), "-", substr(x$date, 1, 2))
if (date.format == "mm-dd-yyyy") x$date <- paste0(substr(x$date, 7, 10), "-", substr(x$date, 1, 2), "-", substr(x$date, 4, 5))
# Set header:
header(x) <- header
# Modify time by specified offset:
if (offset != 0){
t <- time(x) +  offset * 60
x$date <- unlist(lapply(strsplit(as.character(t), " "), function(x) x[1]))
x$time <- unlist(lapply(strsplit(as.character(t), " "), function(x) x[2]))
}
# Convert to minilog object:
x <- minilog(x)
header(x) <- header
return(x)
}
head(x)
